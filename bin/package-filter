#!/bin/bash

# TODO: Disable package if package host arch is disabled
# Will require a new arg for _rpm_target and _deb_target: ARCH_TYPES_DISABLED
# Might not be strictly necessary, since we should exclude arch build in first place.

# This is a utility script to extend the package makefiles with some
# intelligence around whether or not to make a package for a given package type.
# It is not intended for human usage.

SUPPORTED_PACKAGE_TYPES=(apk deb rpm)

# Bash 3.2 is what ships with Macs, and it does not support the ${var,,} syntax
# for converting to lower case. This is one of the few scripts that might
# get run directly on a Mac rather than in a Docker container, so we want
# it to be compatible. At the same time, I want it to use only shell builtins
# and handle bad input, so we have this function that only converts
# valid uppercase package types to lowercase.
function lc_package_type() {
  case $1 in
  APK) printf apk;;
  DEB) printf deb;;
  RPM) printf rpm;;
  *) printf "%s" "$1"
  esac
}

function package_type_enabled() {
  local package_type=$(lc_package_type "$1")
  local package_types_disabled=$(lc_package_type "$2")

  if [[ ! " ${SUPPORTED_PACKAGE_TYPES[@]} " =~ " $package_type " ]]; then
    echo Unsupported package type \"$package_type\" >&2
    exit 1
  fi

  if [[ $package_types_disabled =~ $package_type ]]; then
    echo false
  else
    echo true
  fi
}

MAKE_PACKAGE_TARGET="-make-package"
SKIP_PACKAGE_TARGET="-skip-package"
SKIP_TARGET="_package-disabled"

function make_target() {
  local package_type=$(lc_package_type "$1")
  local package_enabled=$(lc_package_type "$2")
  local package_types_disabled=$(lc_package_type "$3")
  local legacy_package_enabled=$(lc_package_type "$4")
  local arch="$5"
  local arch_types_disabled="$6"

  if [[ ! " ${SUPPORTED_PACKAGE_TYPES[@]} " =~ " $package_type " ]]; then
    echo Unsupported package type \"$package_type\" >&2
    exit 1
  fi

  [[ $legacy_package_enabled == "false" ]] && package_types_disabled+=" $package_type"

  if [[ $package_enabled == "false" ]]; then
    echo $SKIP_TARGET
  elif [[ $(package_type_enabled "$package_type" "$package_types_disabled") == "true" ]] && \
       [[ $($(dirname $0)/arch-filter arch-enabled "$arch" "$arch_types_disabled") == "true" ]]; then
    printf "%s%s\n" $package_type $MAKE_PACKAGE_TARGET
  else
    printf "%s%s\n" $package_type $SKIP_PACKAGE_TARGET
  fi
}

# We will support legacy APK_PACKAGE_ENABLED var as well as PACKAGE_DISABLED_TYPES for apk
# apk package is disabled if APK_PACKAGE_ENABLED is not empty or "true" or "apk" is included in PACKAGE_DISABLED_TYPES
function apk_enabled() {
  local apk_package_enabled=${1:-true}
  local package_types_disabled=$(lc_package_type "$2")

  if [[ $apk_package_enabled != true || $package_types_disabled =~ "apk" ]]; then
    echo false
  else
    echo true
  fi
}

GITHUB_FORMAT_PACKAGE="%s_package_enabled=%s\n"
GITHUB_FORMAT_MATRIX="package_matrix=%s\n"

function info_github() {
  local apk_package_enabled=${1:-true}
  local package_types_disabled=$(lc_package_type "$2")

  local matrix="["
  local enabled

  for pkg in "${SUPPORTED_PACKAGE_TYPES[@]}"; do
    if [[ $pkg == "apk" ]]; then
      enabled=$(apk_enabled "$@")
    else
      enabled=$(package_type_enabled "$pkg" "$package_types_disabled")
    fi
    if [[ $enabled == "true" ]]; then
      [[ $matrix == "[" ]] || matrix+=","
      matrix+="\"$pkg\""
    fi
    printf "$GITHUB_FORMAT_PACKAGE" "$pkg" "$enabled"
  done
  matrix+="]"
  printf "$GITHUB_FORMAT_MATRIX" "$matrix"
}

case "$1" in
  make-target)
    shift
    make_target "$@"
    ;;
  apk-enabled)
    shift
    apk_enabled "$@"
    ;;
  info/github)
    shift
    info_github "$@"
    ;;
esac
