pull_request_rules:
  - name: "approve automated PRs that have passed checks"
    conditions:
      - "-check-failure~=.*alpine.*"
      - "-check-failure~=.*package.*"
      - "-check-failure~=.*matrix.*"
      # We cannot wait for "all the checks" because at the start of a PR, there are no checks:
      # checks get added dynamically. See https://docs.mergify.com/conditions/#validating-all-status-checks
      # So we wait for one long check (build-and-push) and one late-starting check (package) to succeed,
      # and then wait for any checks that have started to finish. That is as close to "all the checks" as we are going to get.
      - "check-success~=.*build-and-push.*"
      - or:
        - "check-success~=.*package.*"
        - "check-skipped~=.*package.*"
      - or:
        - "check-success~=.*alpine.*"
        - "check-skipped~=.*alpine.*"
      - "#check-pending=0"
      - "#files<=6"
      - "base=main"
      - "author=cloudpossebot"
      - "head~=auto-update/.*"
    actions:
      review:
        type: "APPROVE"
        message: "We've automatically approved this PR because the checks from the automated Pull Request have passed."
      label:
        add: ["auto-approved"]

  - name: "merge automated PRs when approved and tests pass"
    conditions:
      - "-check-failure~=.*alpine.*"
      - "-check-failure~=.*package.*"
      - "-check-failure~=.*matrix.*"
      - "check-success~=.*build-and-push.*"
      - or:
        - "check-success~=.*package.*"
        - "check-skipped~=.*package.*"
      - or:
        - "check-success~=.*alpine.*"
        - "check-skipped~=.*alpine.*"
      - "#check-pending=0"
      - "#approved-reviews-by>=1"
      - "#changes-requested-reviews-by=0"
      - "#commented-reviews-by=0"
      - "base=main"
      - "head~=auto-update/.*"
      - "author=cloudpossebot"
    actions:
      merge:
        method: "squash"

  - name: "delete the head branch after merge"
    conditions:
      - "merged"
    actions:
      delete_head_branch: {}

  - name: "ask to resolve conflict"
    conditions:
      - "conflict"
    actions:
      comment:
        message: "This pull request now has conflicts. Could you fix it @{{author}}? üôè"

  - name: "remove outdated reviews"
    conditions:
      - "base=main"
    actions:
      dismiss_reviews:
        changes_requested: true
        approved: true
        message: "This Pull Request has been updated, so we're dismissing all reviews."
