PACKAGES_PATH ?= .
DEB_PACKAGES_PATH ?= $(PACKAGES_PATH)
# Debian sorts 1.0.0-rc1 as later than 1.0.0, but using tilde preserves semver ordering in most cases
DEB_PACKAGE_VERSION = $(subst -,~,$(PACKAGE_VERSION))
# By convention, the first release of a Debian package is 1, not zero
DEB_PACKAGE_RELEASE = $(shell echo $$(($(PACKAGE_RELEASE) + 1)))
# Package managers require that every package file have a unique name.
DEB_PACKAGE ?= $(DEB_PACKAGES_PATH)/$(PACKAGE_NAME)_$(DEB_PACKAGE_VERSION)-$(DEB_PACKAGE_RELEASE)_$(ARCH).deb
DEB_MAINTAINER ?= Cloud Posse <packages@cloudposse.com>
DEB_FPM_EXTRA_ARGS ?=
DEB_FPM_EXTRA_FILES ?=

export DEB_TMP_DIR := $(realpath $(shell mktemp -d ../../tmp/build.XXXXXX))

$(DEB_TMP_DIR)/$(PACKAGE_NAME): INSTALL_PATH=$(DEB_TMP_DIR)
$(DEB_TMP_DIR)/$(PACKAGE_NAME): PATH:=$(DEB_TMP_DIR):$(PATH)
$(DEB_TMP_DIR)/$(PACKAGE_NAME): install

$(DEB_PACKAGE): DEB_FPM_EXTRA_ARGS += $(if $(wildcard $(PACKAGE_NAME).post-install),--after-install $(PACKAGE_NAME).post-install)
$(DEB_PACKAGE): DEB_FPM_EXTRA_ARGS += $(if $(wildcard $(PACKAGE_NAME).post-deinstall),--after-remove $(PACKAGE_NAME).post-deinstall)
$(DEB_PACKAGE): $(DEB_TMP_DIR)/$(PACKAGE_NAME)
	mkdir -p $(DEB_PACKAGES_PATH)
	# Directory created on install will have permissions copied from source directory, so set source dir perms
	chmod 755 $(DEB_TMP_DIR)
	[ -z "$(DEB_FPM_EXTRA_FILES)" ] || cp -a $(DEB_FPM_EXTRA_FILES) $(DEB_TMP_DIR)
	set -x; fpm --force -t deb --maintainer '$(DEB_MAINTAINER)' -s dir -a $(DIST_ARCH) -n $(PACKAGE_NAME) \
		-v $(DEB_PACKAGE_VERSION) --iteration $(DEB_PACKAGE_RELEASE) -C $(DEB_TMP_DIR) \
		--prefix $${INSTALL_DIR:-/usr/bin} --deb-no-default-config-files $(DEB_FPM_EXTRA_ARGS) --package $@ .
	@echo "Testing installation of $@"
	# Suppress progress and "Reading database" logging. See https://askubuntu.com/a/668859
	apt-get -yq -o=Dpkg::Use-Pty=0 install $@
	$(MAKE) test
	apt-get -yq -o=Dpkg::Use-Pty=0 remove $(PACKAGE_NAME)

.PHONY: deb deb_make_package deb_skip_package _deb_target _deb_settings/% deb/%

deb-make-package: $(DEB_PACKAGE)
	@echo "Wrote $(DEB_PACKAGE)"

deb-skip-package:
	@echo Debian packages disabled for $(PACKAGE_NAME)

# Pick which target to make (make, skip, disabled) based on settings
_deb_target: $(shell $(LOCAL_BIN)/package-filter make-target deb $(PACKAGE_ENABLED) "$(PACKAGE_TYPES_DISABLED)")

# use _deb_settings to set Debian-specific settings, then _deb_target to find the right build target
deb: _deb_settings/_deb_target
	@exit 0

# General rule to make any target with DEB-specific settings
deb/%: _deb_settings/%
	@exit 0

_deb_settings/%: DIST_ARCH_DETECTED = $(or $(PACKAGE_DIST_ARCH),$(ARCH))
_deb_settings/%: DIST_ARCH = $(if $(subst x86_64,,$(DIST_ARCH_DETECTED)),$(DIST_ARCH_DETECTED),amd64)
_deb_settings/%: DIST_PACKAGE_TYPE = deb
_deb_settings/%: DIST_DISTRIBUTION = debian
_deb_settings/%: %
	@exit 0

clean::
	rm -f $(DEB_PACKAGE)
