# Contributor: Cloud Posse, LLC <hello@cloudposse.com>
# Maintainer: Cloud Posse, LLC <hello@cloudposse.com>
# vim: filetype=sh
pkgname=${PACKAGE_NAME}
pkgver=${APK_PACKAGE_VERSION:-$PACKAGE_VERSION}
pkgrel=${PACKAGE_RELEASE}
pkgdesc="${PACKAGE_DESCRIPTION}"
builddir="$srcdir"
exe=$PACKAGE_EXE
repo=vendor
installdir=${INSTALL_DIR:-/usr/bin/}

# https://wiki.alpinelinux.org/wiki/APKBUILD_examples

# The homepage for the package. 
# This is to help users find upstream documentation and other information regarding the package.
url=${PACKAGE_HOMEPAGE_URL}

# Can be one of: x86, x86_64, armhf, aarch64, ppc64le, s390x, all, or noarch
#arch=noarch
arch=${OS_ARCH}

# https://wiki.alpinelinux.org/wiki/APKBUILD_Reference#license
license=${PACKAGE_LICENSE}

depends="${APKBUILD_DEPENDS}"
#depends_dev=curl make

install="${APKBUILD_INSTALL_SCRIPTS}"

options="!strip" 

# The source variable is not only used to list the remote source files to fetch, it is also used to list the local files that abuild will need in order to build the apk.
source="${DOWNLOAD_URL}"
source_filename="$(basename $DOWNLOAD_URL)"

unpack() {
  echo "Unpack"
	## default_unpack does not handle gzipped binaries
	## Copy liberally from https://github.com/alpinelinux/abuild/blob/v3.1.0/abuild.in#L403-L442
	## to preserve invariants

	local do_default
	local u
	for u in $source; do
		local s

		if is_remote "$u"; then
			s="$SRCDEST/$(filename_from_uri $u)"
		else
			s="$startdir/$u"
		fi

		case "$s" in
		# Pass tarballs off to default method
		*.tar.gz)
			do_default=true
			;;
		# Decompress non-tarballs and treat as a binary executable
		*.gz)
			do_default=false
			echo "Unzipping $s, expecting ${s%.gz} to be executable"
			echo " pwd: $(pwd)"
			mkdir -p "${srcdir}"
			options="!strip !tracedeps"
			gunzip -f -k -q "$s" || return 1
			echo "Renaming/moving \"${s%.gz}\" to \"${srcdir}/${exe}\""
			mv "${s%.gz}" "$srcdir/$exe"
			;;
		*.bz2)
			do_default=false
			echo "Un-bzipping $s, expecting ${s%.bz2} to be executable"
			echo " pwd: $(pwd)"
			mkdir -p "${srcdir}"
			options="!strip !tracedeps"
			bzip2 -d -f -k -q "$s" || return 1
			echo "Renaming/moving \"${s%.bz2}\" to \"${srcdir}/${exe}\""
			mv "${s%.bz2}" "$srcdir/$exe"
			;;
		# Send everything else to the default method
		*)
			do_default=true
			;;
		esac
	done

	## End of copying
	if [ "$do_default" == "true" ]; then
		default_unpack
	fi

	echo "Unpack"
	echo " buildir: $builddir"
	echo " srcdir: $srcdir"
	ls -l $srcdir
}

# Used for build preparation: patches, etc, should be applied here. 
prepare() {
	echo "Prepare"
	echo " source_filename: $source_filename"
	echo " pkgname: $pkgname"
	echo " buildir: $builddir"
	echo " srcdir: $srcdir"
	echo " exe: $exe"
	echo " pwd: $(pwd)"
	default_prepare
	make --no-print-directory -s -C ${APK_TMP_DIR} package/prepare
	ls -l

	case "${exe}" in 
	# Treat `exe` as a list of executables delimited by spaces
	*" "*)
		echo "Not renaming ${source_filename} => ${exe}..."
		;;
	# Treat `exe` as a single executable
	*)
		if [ "${source_filename}" != "${exe}" ]; then
			if [ ! -f "${exe}" ]; then
				echo "Renaming ${source_filename} to ${exe}"
				mv -f "${source_filename}" "${exe}"
			fi
		fi
		;;
	esac

	chmod 755 ${exe}
}

# This is the compilation stage. 
# Function will be called as the current user
build() {
  echo "Build"
	cd "$builddir"
	echo "Build dir: ls -l $(pwd)"
	ls -l $(pwd)
	echo "Build dir resolved links"
	ls -lL $(pwd)
}

# This function is called right after the build stage. 
# It should check that the packaged thing is actually working
check() {
  echo "Check"
	make -C ${APK_TMP_DIR} --no-print-directory -s test PATH="$PATH:$srcdir" HOME=/tmp
}

# This is the packaging stage. 
# The built application and support files should be installed into $pkgdir.
package() {
  echo "Package"
	echo "Installing packges to ${pkgdir}"
	mkdir -p "${pkgdir}/${installdir}"
	for cmd in ${exe}; do 
	  install -m 755 "$(realpath "${srcdir}/${cmd}")" "${pkgdir}/${installdir}/${cmd}"
	done
	echo "Binaries staged for installation in ${pkgdir}"
	find "${pkgdir}"
}
